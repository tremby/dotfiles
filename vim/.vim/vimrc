set nocompatible

set nowrap
set sidescroll=8
set lazyredraw

" Formatting
set formatoptions=crqnl
set textwidth=80
set foldlevelstart=99
set nojoinspaces
set synmaxcol=512
set breakindent

" Change cursors in different modes
if exists('$TMUX')
	let &t_SI .= "\ePtmux;\e\e[6 q\e\\" " Start insert (bar)
	let &t_EI .= "\ePtmux;\e\e[2 q\e\\" " End insert/replace (block)
	let &t_SR .= "\ePtmux;\e\e[4 q\e\\" " Start replace (underline)
else
	let &t_SI = "\e[6 q" " Start insert (bar)
	let &t_EI = "\e[2 q" " End insert/replace (block)
	let &t_SR = "\e[4 q" " Start replace (underline)
endif

" Readout
set showcmd

" Search
set ignorecase
set smartcase
set hlsearch

" Mouse on but not in insert mode (allow normal middle click pasting)
set mouse=nv

" Fix mouse on very wide terminals (issues on Mac)
if has('mouse_sgr')
	set ttymouse=sgr
endif

" Invisible characters
set list
if &encoding =~ "utf-8"
	set listchars=tab:â€º\ ,trail:Â·,extends:â€¦,precedes:â€¦,nbsp:â€¸
else
	set listchars=tab:>\ ,trail:.,extends:>,precedes:<,nbsp:.
endif

" Mode line
set modeline

" Change how completion works
set wildmode=list:longest

" Spelling
set spelllang=en_gb

" Compile spelling additions if necessary
" See https://vi.stackexchange.com/a/5052/7814
for d in glob('~/.vim/spell/*.add', 1, 1)
	if filereadable(d) && (!filereadable(d . '.spl') || getftime(d) > getftime(d . '.spl'))
		exec 'mkspell! ' . fnameescape(d)
	endif
endfor

" Diffs
set diffopt=filler,iwhite

" I don't use any languages where > is a comment leader, but I do use HTML/JSX
" where > sometimes comes at the start of a line, ending a multi-line tag, so
" remove it from the comment leaders list
set comments-=n:>

" Expand %% on command line to directory of current file
cnoremap %% <C-R>=expand('%:h').'/'<CR>

" Colours
set guifont="DejaVu Sans Mono 8"
highlight Normal guifg=grey90 guibg=black
set background=dark

if version >= 700
	" Make spelling highlights more readable
	highlight SpellBad ctermfg=black guifg=black guibg=red
	highlight SpellCap ctermfg=black guifg=black guibg=blue
	highlight SpellRare ctermfg=black guifg=black guibg=magenta
	highlight SpellLocal ctermfg=black guifg=black guibg=cyan
endif

" Enable true colour mode
if exists('+termguicolors')
	let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
	let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
	set termguicolors
endif

" Configuration for pangloss/vim-javascript plugin
let g:javascript_plugin_jsdoc = 1

" Configuration for mxw/vim-jsx plugin
let g:jsx_ext_required = 0

" Use git grep
set grepprg=git\ grep\ -n\ $*

" Mappings

" Make F13 through F24 no-ops
map [1;2P <Nop>
map [1;2Q <Nop>
map [1;2R <Nop>
map [1;2S <Nop>
map [15;2~ <Nop>
map [17;2~ <Nop>
map [18;2~ <Nop>
map [19;2~ <Nop>
map [20;2~ <Nop>
map [21;2~ <Nop>
map [23;2~ <Nop>
map [24;2~ <Nop>
map! [1;2P <Nop>
map! [1;2Q <Nop>
map! [1;2R <Nop>
map! [1;2S <Nop>
map! [15;2~ <Nop>
map! [17;2~ <Nop>
map! [18;2~ <Nop>
map! [19;2~ <Nop>
map! [20;2~ <Nop>
map! [21;2~ <Nop>
map! [23;2~ <Nop>
map! [24;2~ <Nop>

" Search for selected text, forwards or backwards
vnoremap <silent> * :<C-U>
	\let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
	\gvy/<C-R><C-R>=substitute(
	\escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
	\gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
	\let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
	\gvy?<C-R><C-R>=substitute(
	\escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
	\gV:call setreg('"', old_reg, old_regtype)<CR>

" Transparent editing of gpg encrypted files.
" By Wouter Hanegraaff <wouter@blub.net>
augroup encrypted
au!
" First make sure nothing is written to ~/.viminfo while editing an encrypted file.
autocmd BufReadPre,FileReadPre *.gpg set viminfo=
" We don't want a swap file, as it writes unencrypted data to disk
autocmd BufReadPre,FileReadPre *.gpg set noswapfile
" Switch to binary mode to read the encrypted file
autocmd BufReadPre,FileReadPre *.gpg set bin
autocmd BufReadPre,FileReadPre *.gpg let ch_save = &ch|set ch=2
autocmd BufReadPost,FileReadPost *.gpg '[,']!gpg --decrypt 2>/dev/null
" Switch to normal mode for editing
autocmd BufReadPost,FileReadPost *.gpg set nobin
autocmd BufReadPost,FileReadPost *.gpg let &ch = ch_save|unlet ch_save
autocmd BufReadPost,FileReadPost *.gpg execute ":doautocmd BufReadPost " . expand("%:r")
" Convert all text to encrypted text before writing
autocmd BufWritePre,FileWritePre *.gpg mark z
autocmd BufWritePre,FileWritePre *.gpg '[,']!gpg --default-recipient-self -ae 2>/dev/null
" Undo the encryption so we are back in the normal text, directly
" after the file has been written.
autocmd BufWritePost,FileWritePost *.gpg u
autocmd BufWritePost,FileWritePost *.gpg 'z

" Editorconfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*', '\.diff$']

" Twig
autocmd FileType twig set filetype=jinja

" Git-specific
autocmd BufRead,BufNewFile */.git/*_EDITMSG setfiletype gitcommit
autocmd FileType gitcommit set textwidth=70 spell expandtab formatoptions+=t

" Detect rebase patch files and set as diff (otherwise they load as git)
autocmd BufRead */.git/rebase-apply/patch setfiletype diff

" Mail-specific
autocmd FileType mail set textwidth=70 spell expandtab
autocmd FileType mail set comments+=n:>

" CSS-specific
autocmd FileType css set iskeyword+=-
autocmd FileType scss set iskeyword+=-

" Disable python filetype plugin's "recommended" settings since they override
" editorconfig
let g:python_recommended_style = 0

" Set filetype of .env.example files
autocmd BufNewFile,BufRead .env.example setfiletype sh

" Timestamp bindings for timesheet files
autocmd FileType timesheet nnoremap <buffer> <Return><Return> :r !date +"\%Y-\%m-\%dT\%H:\%M:\%S\%z (W\%V-\%a)"<Return>A<Tab>
autocmd FileType timesheet nnoremap <buffer> <Return>s o<Esc>:r !date +"\%Y-W\%V"<Return>Istart<Tab><Esc>
autocmd FileType timesheet inoremap <buffer> <Space><Space> <Tab><Esc>m`k03Wyt<Tab>``pa<Tab>

" FZF runtime
if isdirectory($HOME . "/src/fzf")
	let &runtimepath .= "," . $HOME . "/src/fzf"
elseif isdirectory("/usr/local/opt/fzf")
	set runtimepath+=/usr/local/opt/fzf
endif

" FZF bindings
nmap <leader>f :Files<Return>
nmap <leader>t :GFiles<Return>

" Select last-changed text in same visual mode
nnoremap <expr> <leader>gv '`[' . strpart(getregtype(), 0, 1) . '`]'
" Configuration for ALE
" Lint both CSS and JS in tsx and jsx files
augroup FiletypeGroup
	autocmd!
	au BufNewFile,BufRead *.jsx set filetype=javascript.css
	au BufNewFile,BufRead *.tsx set filetype=typescript.css
augroup END
let g:ale_completion_enabled = 1
set omnifunc=ale#completion#OmniFunc
let g:ale_completion_autoimport = 1
nmap <leader>? :ALEHover<Return>
nmap <leader>e? :ALEDetail<Return>
nmap <leader>en :ALENext<Return>
nmap <leader>eN :ALEPrevious<Return>

" Jump between source, stories, tests of this file
nmap <leader>g. :e<Space><C-R>%<C-F>:s/\.\@<=\(stories\\|test\)\.//ge<Return><Return>
nmap <leader>gs :e<Space><C-R>%<C-F>:s/\.\@<=\(stories\\|test\)\.//ge<Return>$F.i.stories<Esc><Return>
nmap <leader>gt :e<Space><C-R>%<C-F>:s/\.\@<=\(stories\\|test\)\.//ge<Return>$F.i.test<Esc><Return>
